
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 30 20:59:29 GMT+01:00 2013
//----------------------------------------------------

package stupaq.cloudatlas.parser.QueryLanguage;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 30 20:59:29 GMT+01:00 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\005\000\002\004\006\000\002\005\003" +
    "\000\002\005\005\000\002\006\004\000\002\006\002\000" +
    "\002\007\005\000\002\007\002\000\002\010\005\000\002" +
    "\011\003\000\002\011\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\002\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\014\003\000\002\014\005\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\017\004\000\002\017\003\000\002\020" +
    "\005\000\002\020\003\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\004\000\002\024\003\000\002" +
    "\025\003\000\002\025\006\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\026\002\000\002\026\003\000\002" +
    "\026\005\000\002\027\002\000\002\027\003\000\002\027" +
    "\005\000\002\030\003\000\002\030\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\005\000\002\034\003\000\002\035\005" +
    "\000\002\035\003\000\002\036\004\000\002\036\003\000" +
    "\002\037\005\000\002\037\003\000\002\040\005\000\002" +
    "\040\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\043\006\001\002\000\004\002\166\001" +
    "\002\000\004\002\000\001\002\000\032\006\036\007\035" +
    "\011\034\013\033\015\031\036\037\045\020\046\015\047" +
    "\014\050\012\051\030\052\032\001\002\000\006\002\uffff" +
    "\004\010\001\002\000\004\043\006\001\002\000\004\002" +
    "\ufffe\001\002\000\062\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\010\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\033\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\044" +
    "\uffd7\001\002\000\062\002\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\010\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\033\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\044" +
    "\uffdc\001\002\000\062\002\uffd9\004\uffd9\005\uffd9\006\uffd9" +
    "\010\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\033\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\044" +
    "\uffd9\001\002\000\062\002\uffbf\004\uffbf\005\uffbf\006\uffbf" +
    "\010\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\033\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\044" +
    "\uffbf\001\002\000\022\002\uffed\004\uffed\005\uffed\010\uffed" +
    "\030\164\040\060\041\uffed\044\uffed\001\002\000\062\002" +
    "\uffde\004\uffde\005\uffde\006\uffde\010\uffde\015\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\044\uffde\001\002\000\062\002" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\010\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\044\uffbe\001\002\000\062\002" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\010\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\147\021\146\022\145\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\044\uffe0\001\002\000\054\002" +
    "\uffe2\004\uffe2\005\uffe2\006\140\010\uffe2\015\uffe2\016\uffe2" +
    "\017\142\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\033\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\044\uffe2\001\002\000\050\002\uffe4\004\uffe4\005\uffe4\010" +
    "\uffe4\015\160\016\152\023\161\024\157\025\156\026\154" +
    "\027\uffe4\030\uffe4\031\uffe4\033\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\155\044\uffe4\001\002\000\032\002\uffe6\004\uffe6" +
    "\005\uffe6\010\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\044\uffe6\001\002\000\032\002\uffe8" +
    "\004\uffe8\005\uffe8\010\uffe8\027\uffe8\030\uffe8\031\uffe8\033" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\044\uffe8\001\002\000\062" +
    "\002\uffd8\004\uffd8\005\uffd8\006\uffd8\010\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\001\002\000\032" +
    "\002\uffea\004\uffea\005\uffea\010\uffea\027\063\030\uffea\031" +
    "\uffea\033\uffea\037\uffea\040\uffea\041\uffea\044\uffea\001\002" +
    "\000\062\002\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\001\002" +
    "\000\034\006\036\007\035\011\034\013\033\015\031\016" +
    "\uffcd\036\116\045\020\046\015\047\014\050\012\051\030" +
    "\052\032\001\002\000\064\002\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\102\010\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\033\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\044\uffdb\001\002\000\004\014\101\001\002\000" +
    "\004\012\100\001\002\000\034\006\036\007\035\011\034" +
    "\013\033\015\031\036\037\043\006\045\020\046\015\047" +
    "\014\050\012\051\030\052\032\001\002\000\026\007\035" +
    "\011\034\013\033\015\031\045\020\046\015\047\014\050" +
    "\012\051\030\052\032\001\002\000\030\006\036\007\035" +
    "\011\034\013\033\015\031\045\020\046\015\047\014\050" +
    "\012\051\030\052\032\001\002\000\014\002\ufff9\004\ufff9" +
    "\010\ufff9\041\ufff9\044\044\001\002\000\016\002\ufffc\004" +
    "\ufffc\005\042\010\ufffc\041\ufffc\044\ufffc\001\002\000\032" +
    "\006\036\007\035\011\034\013\033\015\031\036\037\045" +
    "\020\046\015\047\014\050\012\051\030\052\032\001\002" +
    "\000\014\002\ufffb\004\ufffb\010\ufffb\041\ufffb\044\ufffb\001" +
    "\002\000\032\006\036\007\035\011\034\013\033\015\031" +
    "\036\037\045\020\046\015\047\014\050\012\051\030\052" +
    "\032\001\002\000\012\002\ufff7\004\ufff7\010\ufff7\041\046" +
    "\001\002\000\004\032\050\001\002\000\010\002\ufffd\004" +
    "\ufffd\010\ufffd\001\002\000\032\006\036\007\035\011\034" +
    "\013\033\015\031\036\037\045\020\046\015\047\014\050" +
    "\012\051\030\052\032\001\002\000\022\002\ufff1\004\ufff1" +
    "\005\ufff1\010\ufff1\031\056\033\061\037\ufff1\040\060\001" +
    "\002\000\012\002\ufff5\004\ufff5\005\054\010\ufff5\001\002" +
    "\000\010\002\ufff8\004\ufff8\010\ufff8\001\002\000\032\006" +
    "\036\007\035\011\034\013\033\015\031\036\037\045\020" +
    "\046\015\047\014\050\012\051\030\052\032\001\002\000" +
    "\010\002\ufff4\004\ufff4\010\ufff4\001\002\000\014\002\ufff3" +
    "\004\ufff3\005\ufff3\010\ufff3\037\ufff3\001\002\000\014\002" +
    "\uffee\004\uffee\005\uffee\010\uffee\037\065\001\002\000\032" +
    "\006\036\007\035\011\034\013\033\015\031\036\037\045" +
    "\020\046\015\047\014\050\012\051\030\052\032\001\002" +
    "\000\014\002\ufff2\004\ufff2\005\ufff2\010\ufff2\037\ufff2\001" +
    "\002\000\032\002\uffeb\004\uffeb\005\uffeb\010\uffeb\027\063" +
    "\030\uffeb\031\uffeb\033\uffeb\037\uffeb\040\uffeb\041\uffeb\044" +
    "\uffeb\001\002\000\032\006\036\007\035\011\034\013\033" +
    "\015\031\036\037\045\020\046\015\047\014\050\012\051" +
    "\030\052\032\001\002\000\032\002\uffe9\004\uffe9\005\uffe9" +
    "\010\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\044\uffe9\001\002\000\006\034\070\035\067" +
    "\001\002\000\012\002\ufff6\004\ufff6\005\ufff6\010\ufff6\001" +
    "\002\000\012\002\uffef\004\uffef\005\uffef\010\uffef\001\002" +
    "\000\012\002\ufff0\004\ufff0\005\ufff0\010\ufff0\001\002\000" +
    "\014\002\ufffa\004\ufffa\010\ufffa\040\060\041\ufffa\001\002" +
    "\000\032\002\uffe7\004\uffe7\005\uffe7\010\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\033\uffe7\037\uffe7\040\uffe7\041\uffe7\044\uffe7" +
    "\001\002\000\062\002\uffdd\004\uffdd\005\uffdd\006\uffdd\010" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\033\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd" +
    "\001\002\000\006\010\077\040\060\001\002\000\004\010" +
    "\076\001\002\000\062\002\uffd2\004\uffd2\005\uffd2\006\uffd2" +
    "\010\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\033\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044" +
    "\uffd2\001\002\000\062\002\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\010\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\033\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044" +
    "\uffd1\001\002\000\062\002\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\010\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\033\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\044" +
    "\uffd5\001\002\000\062\002\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\010\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\033\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\044" +
    "\uffd4\001\002\000\034\006\036\007\035\010\uffd0\011\034" +
    "\013\033\015\031\036\037\045\020\046\015\047\014\050" +
    "\012\051\030\052\032\001\002\000\010\005\106\010\uffcf" +
    "\040\060\001\002\000\004\010\105\001\002\000\062\002" +
    "\uffda\004\uffda\005\uffda\006\uffda\010\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\033\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\044\uffda\001\002\000\034\006" +
    "\036\007\035\010\uffd0\011\034\013\033\015\031\036\037" +
    "\045\020\046\015\047\014\050\012\051\030\052\032\001" +
    "\002\000\004\010\uffce\001\002\000\032\005\uffb4\006\140" +
    "\015\uffb4\016\uffb4\017\142\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\040\uffb4\042\uffb4\001\002\000\026\005\uffb6" +
    "\015\136\016\uffb6\023\135\024\134\025\132\026\130\027" +
    "\uffb6\040\uffb6\042\131\001\002\000\012\005\uffb8\016\uffb8" +
    "\027\uffb8\040\uffb8\001\002\000\012\005\uffba\016\uffba\027" +
    "\uffba\040\uffba\001\002\000\012\005\uffbc\016\uffbc\027\123" +
    "\040\uffbc\001\002\000\004\016\127\001\002\000\030\006" +
    "\036\007\035\011\034\013\033\015\031\045\020\046\015" +
    "\047\014\050\012\051\030\052\032\001\002\000\010\005" +
    "\120\016\uffcc\040\121\001\002\000\034\006\036\007\035" +
    "\011\034\013\033\015\031\016\uffcd\036\116\045\020\046" +
    "\015\047\014\050\012\051\030\052\032\001\002\000\032" +
    "\006\036\007\035\011\034\013\033\015\031\036\116\045" +
    "\020\046\015\047\014\050\012\051\030\052\032\001\002" +
    "\000\012\005\uffbd\016\uffbd\027\123\040\uffbd\001\002\000" +
    "\032\006\036\007\035\011\034\013\033\015\031\036\116" +
    "\045\020\046\015\047\014\050\012\051\030\052\032\001" +
    "\002\000\012\005\uffbb\016\uffbb\027\uffbb\040\uffbb\001\002" +
    "\000\004\016\uffcb\001\002\000\012\005\uffb9\016\uffb9\027" +
    "\uffb9\040\uffb9\001\002\000\062\002\uffd3\004\uffd3\005\uffd3" +
    "\006\uffd3\010\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\033\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\044\uffd3\001\002\000\030\006\uffaf\007\uffaf\011\uffaf" +
    "\013\uffaf\015\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\001\002\000\004\047\151\001\002\000\030" +
    "\006\uffb1\007\uffb1\011\uffb1\013\uffb1\015\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\001\002\000\030" +
    "\006\036\007\035\011\034\013\033\015\031\045\020\046" +
    "\015\047\014\050\012\051\030\052\032\001\002\000\030" +
    "\006\uffb2\007\uffb2\011\uffb2\013\uffb2\015\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\001\002\000\030" +
    "\006\uffb3\007\uffb3\011\uffb3\013\uffb3\015\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\001\002\000\030" +
    "\006\uffb0\007\uffb0\011\uffb0\013\uffb0\015\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\001\002\000\032" +
    "\005\uffb5\006\140\015\uffb5\016\uffb5\017\142\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\040\uffb5\042\uffb5\001\002" +
    "\000\030\006\uffc9\007\uffc9\011\uffc9\013\uffc9\015\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\001\002" +
    "\000\030\006\036\007\035\011\034\013\033\015\031\045" +
    "\020\046\015\047\014\050\012\051\030\052\032\001\002" +
    "\000\030\006\uffca\007\uffca\011\uffca\013\uffca\015\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\001\002" +
    "\000\062\002\uffe1\004\uffe1\005\uffe1\006\uffe1\010\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\147\021\146\022\145\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\033" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\001\002" +
    "\000\030\006\036\007\035\011\034\013\033\015\031\045" +
    "\020\046\015\047\014\050\012\051\030\052\032\001\002" +
    "\000\030\006\uffc6\007\uffc6\011\uffc6\013\uffc6\015\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\001\002" +
    "\000\030\006\uffc7\007\uffc7\011\uffc7\013\uffc7\015\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\001\002" +
    "\000\030\006\uffc8\007\uffc8\011\uffc8\013\uffc8\015\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\001\002" +
    "\000\062\002\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\001\002" +
    "\000\012\005\uffb7\016\uffb7\027\uffb7\040\uffb7\001\002\000" +
    "\030\006\uffc3\007\uffc3\011\uffc3\013\uffc3\015\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\001\002\000" +
    "\030\006\036\007\035\011\034\013\033\015\031\045\020" +
    "\046\015\047\014\050\012\051\030\052\032\001\002\000" +
    "\030\006\uffc0\007\uffc0\011\uffc0\013\uffc0\015\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\001\002\000" +
    "\004\047\162\001\002\000\030\006\uffc2\007\uffc2\011\uffc2" +
    "\013\uffc2\015\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\001\002\000\030\006\uffc4\007\uffc4\011\uffc4" +
    "\013\uffc4\015\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\001\002\000\030\006\uffc1\007\uffc1\011\uffc1" +
    "\013\uffc1\015\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\001\002\000\030\006\uffc5\007\uffc5\011\uffc5" +
    "\013\uffc5\015\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\001\002\000\032\002\uffe5\004\uffe5\005\uffe5" +
    "\010\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\044\uffe5\001\002\000\054\002\uffe3\004\uffe3" +
    "\005\uffe3\006\140\010\uffe3\015\uffe3\016\uffe3\017\142\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\033\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\001" +
    "\002\000\004\052\165\001\002\000\016\002\uffec\004\uffec" +
    "\005\uffec\010\uffec\041\uffec\044\uffec\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\037\014\040" +
    "\015\015\016\026\017\024\020\023\021\022\022\021\023" +
    "\020\024\016\025\012\033\025\001\001\000\002\001\001" +
    "\000\006\003\010\004\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\143\001\001\000\004\030\140\001\001" +
    "\000\004\032\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\022\107\023\020\024\016\025\012\027\114\033" +
    "\025\034\116\035\113\036\112\037\111\040\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\074\015\073\016\026\017\024\020\023\021\022" +
    "\022\021\023\020\024\016\025\012\033\025\001\001\000" +
    "\006\025\072\033\025\001\001\000\020\020\071\021\022" +
    "\022\021\023\020\024\016\025\012\033\025\001\001\000" +
    "\004\006\044\001\001\000\002\001\001\000\032\005\042" +
    "\014\040\015\015\016\026\017\024\020\023\021\022\022" +
    "\021\023\020\024\016\025\012\033\025\001\001\000\002" +
    "\001\001\000\026\015\070\016\026\017\024\020\023\021" +
    "\022\022\021\023\020\024\016\025\012\033\025\001\001" +
    "\000\004\007\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\051\011\052\015\050\016\026\017\024" +
    "\020\023\021\022\022\021\023\020\024\016\025\012\033" +
    "\025\001\001\000\004\012\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\051\011\054\015\050\016" +
    "\026\017\024\020\023\021\022\022\021\023\020\024\016" +
    "\025\012\033\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\065\001\001\000\024\016\061\017\024" +
    "\020\023\021\022\022\021\023\020\024\016\025\012\033" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\017\063\020\023\021\022\022\021\023\020\024\016\025" +
    "\012\033\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\015\102" +
    "\016\026\017\024\020\023\021\022\022\021\023\020\024" +
    "\016\025\012\026\103\033\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\015\102\016" +
    "\026\017\024\020\023\021\022\022\021\023\020\024\016" +
    "\025\012\026\106\033\025\001\001\000\002\001\001\000" +
    "\004\030\140\001\001\000\004\041\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\022\107\023\020\024\016\025\012\033\025" +
    "\037\125\040\110\001\001\000\002\001\001\000\030\022" +
    "\107\023\020\024\016\025\012\027\124\033\025\034\116" +
    "\035\113\036\112\037\111\040\110\001\001\000\024\022" +
    "\107\023\020\024\016\025\012\033\025\035\121\036\112" +
    "\037\111\040\110\001\001\000\002\001\001\000\022\022" +
    "\107\023\020\024\016\025\012\033\025\036\123\037\111" +
    "\040\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\136\023\020\024" +
    "\016\025\012\033\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\140\001\001\000" +
    "\002\001\001\000\012\023\142\024\016\025\012\033\025" +
    "\001\001\000\002\001\001\000\004\031\143\001\001\000" +
    "\010\024\147\025\012\033\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\162\023\020" +
    "\024\016\025\012\033\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram pXProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // XRelOpNGT ::= _SYMB_18 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOpNGT RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpLesserEqualNGT(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOpNGT",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // XRelOpNGT ::= _SYMB_9 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOpNGT RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpLesserNGT(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOpNGT",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // XRelOpNGT ::= _SYMB_17 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOpNGT RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpGreaterEqualNGT(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOpNGT",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // XRelOpNGT ::= _SYMB_16 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOpNGT RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpNotEqualNGT(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOpNGT",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // XRelOpNGT ::= _SYMB_15 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOpNGT RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpEqualNGT(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOpNGT",31, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // XExpressionNGT4 ::= XExpression5 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ExpressionNGT(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpressionNGT4",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // XExpressionNGT4 ::= XExpressionNGT4 XRelOpNGT XExpression5 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOpNGT p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOpNGT)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolExprRelNGT(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpressionNGT4",30, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // XExpressionNGT3 ::= XExpressionNGT4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpressionNGT3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // XExpressionNGT3 ::= XExpressionNGT4 _SYMB_30 _STRING_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolExprRegexNGT(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpressionNGT3",29, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // XExpressionNGT2 ::= XExpressionNGT3 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpressionNGT2",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // XExpressionNGT2 ::= _SYMB_26 XExpressionNGT3 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprNotNGT(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpressionNGT2",28, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // XExpressionNGT1 ::= XExpressionNGT2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpressionNGT1",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // XExpressionNGT1 ::= XExpressionNGT1 _SYMB_19 XExpressionNGT2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprAndNGT(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpressionNGT1",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // XExpressionNGT ::= XExpressionNGT1 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpressionNGT",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // XExpressionNGT ::= XExpressionNGT _SYMB_28 XExpressionNGT1 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprOrNGT(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpressionNGT",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // XBoolConst ::= _SYMB_33 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XBoolConst",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // XBoolConst ::= _SYMB_34 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XBoolConst",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // XRelOp ::= _SYMB_18 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpLesserEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // XRelOp ::= _SYMB_9 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpLesser(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // XRelOp ::= _SYMB_17 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpGreaterEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // XRelOp ::= _SYMB_10 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpGreater(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // XRelOp ::= _SYMB_16 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpNotEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // XRelOp ::= _SYMB_15 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // XArithOpMultiply ::= _SYMB_14 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpModulo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpMultiply",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // XArithOpMultiply ::= _SYMB_13 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpDivide(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpMultiply",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // XArithOpMultiply ::= _SYMB_12 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpMultiply(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpMultiply",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // XArithOpAdd ::= _SYMB_2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpSubstract(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpAdd",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // XArithOpAdd ::= _SYMB_11 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpAdd(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpAdd",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ListXExpressionNGT ::= XExpressionNGT _SYMB_1 ListXExpressionNGT 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpressionNGT p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpressionNGT",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListXExpressionNGT ::= XExpressionNGT 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpressionNGT RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpressionNGT(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpressionNGT",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListXExpressionNGT ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpressionNGT RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpressionNGT(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpressionNGT",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListXExpression ::= XExpression _SYMB_1 ListXExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpression",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListXExpression ::= XExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpression",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListXExpression ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpression",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // XExpression8 ::= _SYMB_3 XExpression _SYMB_4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // XExpression8 ::= _SYMB_3 XStatement _SYMB_4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprStmt(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // XExpression8 ::= _SYMB_9 ListXExpressionNGT _SYMB_10 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpressionNGT p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpressionNGT)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprAngle(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // XExpression8 ::= _SYMB_7 _SYMB_8 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprBrackets(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // XExpression8 ::= _SYMB_5 _SYMB_6 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprBraces(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // XExpression8 ::= _DOUBLE_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // XExpression8 ::= _INTEGER_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // XExpression8 ::= XBoolConst 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprTrue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // XExpression8 ::= _STRING_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // XExpression8 ::= XIdent _SYMB_3 ListXExpression _SYMB_4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // XExpression8 ::= XIdent 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // XExpression7 ::= XExpression8 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression7",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // XExpression7 ::= _SYMB_2 XExpression8 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithExprNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression7",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // XExpression6 ::= XExpression7 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // XExpression6 ::= XExpression6 XArithOpMultiply XExpression7 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithExprMultiply(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // XExpression5 ::= XExpression6 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // XExpression5 ::= XExpression5 XArithOpAdd XExpression6 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithExprAdd(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // XExpression4 ::= XExpression5 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // XExpression4 ::= XExpression4 XRelOp XExpression5 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolExprRel(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // XExpression3 ::= XExpression4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression3",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // XExpression3 ::= XExpression4 _SYMB_30 _STRING_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolExprRegex(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression3",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // XExpression2 ::= XExpression3 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression2",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // XExpression2 ::= _SYMB_26 XExpression3 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprNot(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression2",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // XExpression1 ::= XExpression2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // XExpression1 ::= XExpression1 _SYMB_19 XExpression2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // XExpression ::= XExpression1 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // XExpression ::= XExpression _SYMB_28 XExpression1 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // XSelectItem ::= XExpression _SYMB_20 XIdent 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.SelectItemAs(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XSelectItem",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // XSelectItem ::= XExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.SelectItem(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XSelectItem",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // XNullsOption ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.NullsOptionEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XNullsOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // XNullsOption ::= _SYMB_27 _SYMB_25 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.NullsOptionLast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XNullsOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // XNullsOption ::= _SYMB_27 _SYMB_24 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.NullsOptionFirst(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XNullsOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // XOrderOption ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderOptionEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderOption",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // XOrderOption ::= _SYMB_23 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderOptionDesc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderOption",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // XOrderOption ::= _SYMB_21 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderOptionAsc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderOption",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListXOrderItem ::= XOrderItem _SYMB_1 ListXOrderItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXOrderItem",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListXOrderItem ::= XOrderItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXOrderItem",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // XOrderItem ::= XExpression XOrderOption XNullsOption 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderItemCond(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderItem",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // XOrderClause ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderClauseEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderClause",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // XOrderClause ::= _SYMB_29 _SYMB_22 ListXOrderItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderClause(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderClause",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // XWhereClause ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.WhereClauseEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XWhereClause",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // XWhereClause ::= _SYMB_32 XExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.WhereClause(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XWhereClause",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListXSelectItem ::= XSelectItem _SYMB_1 ListXSelectItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXSelectItem",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListXSelectItem ::= XSelectItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXSelectItem",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // XStatement ::= _SYMB_31 ListXSelectItem XWhereClause XOrderClause 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause p_4 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.Statement(p_2,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XStatement",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListXStatement ::= XStatement _SYMB_0 ListXStatement 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXStatement",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListXStatement ::= XStatement 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXStatement",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // XProgram ::= ListXStatement 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XProgram",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= XProgram EOF 
            {
              Object RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram start_val = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

