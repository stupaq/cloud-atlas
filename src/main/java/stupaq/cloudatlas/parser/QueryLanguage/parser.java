
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 06 23:48:09 GMT+01:00 2013
//----------------------------------------------------

package stupaq.cloudatlas.parser.QueryLanguage;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 06 23:48:09 GMT+01:00 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\005\000\002\004\006\000\002\005\003" +
    "\000\002\005\005\000\002\006\004\000\002\006\002\000" +
    "\002\007\005\000\002\007\002\000\002\010\005\000\002" +
    "\011\003\000\002\011\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\002\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\014\003\000\002\014\005\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\017\004\000\002\017\003\000\002\020" +
    "\005\000\002\020\003\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\004\000\002\024\003\000\002" +
    "\025\003\000\002\025\006\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\026\002\000\002\026\003\000\002" +
    "\026\005\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\003\000\002" +
    "\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\045\006\001\002\000\004\002\137\001" +
    "\002\000\004\002\000\001\002\000\032\006\036\007\035" +
    "\011\034\013\033\015\031\040\037\047\015\050\013\051" +
    "\016\052\012\053\030\054\032\001\002\000\006\002\uffff" +
    "\004\010\001\002\000\004\045\006\001\002\000\004\002" +
    "\ufffe\001\002\000\064\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\010\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\035\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\046\uffd7\001\002\000\064\002\uffc2\004\uffc2\005\uffc2" +
    "\006\uffc2\010\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\035\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\046\uffc2\001\002\000\064\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\046\uffdc\001\002\000\064\002\uffc1" +
    "\004\uffc1\005\uffc1\006\uffc1\010\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\046\uffc1\001\002\000\064" +
    "\002\uffd9\004\uffd9\005\uffd9\006\uffd9\010\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9\001\002" +
    "\000\022\002\uffed\004\uffed\005\uffed\010\uffed\032\135\042" +
    "\057\043\uffed\046\uffed\001\002\000\064\002\uffde\004\uffde" +
    "\005\uffde\006\uffde\010\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\035\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\046\uffde\001\002\000\064\002\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\010\uffe0\016\uffe0\017\uffe0\020" +
    "\133\021\132\022\131\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\035\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\001\002\000\056" +
    "\002\uffe2\004\uffe2\005\uffe2\006\124\010\uffe2\016\uffe2\017" +
    "\126\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\035\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\046\uffe2\001\002\000\052\002\uffe4\004\uffe4" +
    "\005\uffe4\010\uffe4\016\uffe4\023\121\024\120\025\117\026" +
    "\116\027\112\030\114\031\uffe4\032\uffe4\033\uffe4\035\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\115\046\uffe4\001\002\000" +
    "\034\002\uffe6\004\uffe6\005\uffe6\010\uffe6\016\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\035\uffe6\041\uffe6\042\uffe6\043\uffe6\046" +
    "\uffe6\001\002\000\034\002\uffe8\004\uffe8\005\uffe8\010\uffe8" +
    "\016\uffe8\031\uffe8\032\uffe8\033\uffe8\035\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\046\uffe8\001\002\000\064\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\010\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\046\uffd8\001\002\000\034\002\uffea" +
    "\004\uffea\005\uffea\010\uffea\016\uffea\031\063\032\uffea\033" +
    "\uffea\035\uffea\041\uffea\042\uffea\043\uffea\046\uffea\001\002" +
    "\000\064\002\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\035\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\046\uffd6" +
    "\001\002\000\034\006\036\007\035\011\034\013\033\015" +
    "\031\016\uffd0\040\037\047\015\050\013\051\016\052\012" +
    "\053\030\054\032\001\002\000\066\002\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\102\010\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\046\uffdb\001\002\000\004\014" +
    "\101\001\002\000\004\012\100\001\002\000\034\006\036" +
    "\007\035\011\034\013\033\015\031\040\037\045\006\047" +
    "\015\050\013\051\016\052\012\053\030\054\032\001\002" +
    "\000\026\007\035\011\034\013\033\015\031\047\015\050" +
    "\013\051\016\052\012\053\030\054\032\001\002\000\030" +
    "\006\036\007\035\011\034\013\033\015\031\047\015\050" +
    "\013\051\016\052\012\053\030\054\032\001\002\000\014" +
    "\002\ufff9\004\ufff9\010\ufff9\043\ufff9\046\044\001\002\000" +
    "\016\002\ufffc\004\ufffc\005\042\010\ufffc\043\ufffc\046\ufffc" +
    "\001\002\000\032\006\036\007\035\011\034\013\033\015" +
    "\031\040\037\047\015\050\013\051\016\052\012\053\030" +
    "\054\032\001\002\000\014\002\ufffb\004\ufffb\010\ufffb\043" +
    "\ufffb\046\ufffb\001\002\000\032\006\036\007\035\011\034" +
    "\013\033\015\031\040\037\047\015\050\013\051\016\052" +
    "\012\053\030\054\032\001\002\000\012\002\ufff7\004\ufff7" +
    "\010\ufff7\043\046\001\002\000\004\034\050\001\002\000" +
    "\010\002\ufffd\004\ufffd\010\ufffd\001\002\000\032\006\036" +
    "\007\035\011\034\013\033\015\031\040\037\047\015\050" +
    "\013\051\016\052\012\053\030\054\032\001\002\000\022" +
    "\002\ufff1\004\ufff1\005\ufff1\010\ufff1\033\061\035\060\041" +
    "\ufff1\042\057\001\002\000\012\002\ufff5\004\ufff5\005\054" +
    "\010\ufff5\001\002\000\010\002\ufff8\004\ufff8\010\ufff8\001" +
    "\002\000\032\006\036\007\035\011\034\013\033\015\031" +
    "\040\037\047\015\050\013\051\016\052\012\053\030\054" +
    "\032\001\002\000\010\002\ufff4\004\ufff4\010\ufff4\001\002" +
    "\000\014\002\uffee\004\uffee\005\uffee\010\uffee\041\065\001" +
    "\002\000\032\006\036\007\035\011\034\013\033\015\031" +
    "\040\037\047\015\050\013\051\016\052\012\053\030\054" +
    "\032\001\002\000\014\002\ufff2\004\ufff2\005\ufff2\010\ufff2" +
    "\041\ufff2\001\002\000\014\002\ufff3\004\ufff3\005\ufff3\010" +
    "\ufff3\041\ufff3\001\002\000\034\002\uffeb\004\uffeb\005\uffeb" +
    "\010\uffeb\016\uffeb\031\063\032\uffeb\033\uffeb\035\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\046\uffeb\001\002\000\032\006\036" +
    "\007\035\011\034\013\033\015\031\040\037\047\015\050" +
    "\013\051\016\052\012\053\030\054\032\001\002\000\034" +
    "\002\uffe9\004\uffe9\005\uffe9\010\uffe9\016\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\035\uffe9\041\uffe9\042\uffe9\043\uffe9\046\uffe9" +
    "\001\002\000\006\036\070\037\067\001\002\000\012\002" +
    "\ufff6\004\ufff6\005\ufff6\010\ufff6\001\002\000\012\002\uffef" +
    "\004\uffef\005\uffef\010\uffef\001\002\000\012\002\ufff0\004" +
    "\ufff0\005\ufff0\010\ufff0\001\002\000\014\002\ufffa\004\ufffa" +
    "\010\ufffa\042\057\043\ufffa\001\002\000\034\002\uffe7\004" +
    "\uffe7\005\uffe7\010\uffe7\016\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\035\uffe7\041\uffe7\042\uffe7\043\uffe7\046\uffe7\001\002\000" +
    "\064\002\uffdd\004\uffdd\005\uffdd\006\uffdd\010\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\035\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046\uffdd\001" +
    "\002\000\006\010\077\042\057\001\002\000\004\010\076" +
    "\001\002\000\064\002\uffd2\004\uffd2\005\uffd2\006\uffd2\010" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\035\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\046\uffd2\001\002\000\064\002\uffd1\004\uffd1\005\uffd1\006" +
    "\uffd1\010\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\035\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\046\uffd1\001\002\000\064\002\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\010\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\046\uffd5\001\002\000\064\002\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\010\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\046\uffd4\001\002\000\034\006" +
    "\036\007\035\010\uffd0\011\034\013\033\015\031\040\037" +
    "\047\015\050\013\051\016\052\012\053\030\054\032\001" +
    "\002\000\012\005\106\010\uffcf\016\uffcf\042\057\001\002" +
    "\000\004\010\105\001\002\000\064\002\uffda\004\uffda\005" +
    "\uffda\006\uffda\010\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\035\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\046\uffda\001\002\000\036\006\036\007" +
    "\035\010\uffd0\011\034\013\033\015\031\016\uffd0\040\037" +
    "\047\015\050\013\051\016\052\012\053\030\054\032\001" +
    "\002\000\006\010\uffce\016\uffce\001\002\000\004\016\111" +
    "\001\002\000\064\002\uffd3\004\uffd3\005\uffd3\006\uffd3\010" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\035\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\046\uffd3\001\002\000\030\006\uffc4\007\uffc4\011\uffc4\013" +
    "\uffc4\015\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\001\002\000\030\006\036\007\035\011\034\013" +
    "\033\015\031\047\015\050\013\051\016\052\012\053\030" +
    "\054\032\001\002\000\030\006\uffc3\007\uffc3\011\uffc3\013" +
    "\uffc3\015\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\001\002\000\004\051\122\001\002\000\030\006" +
    "\uffc5\007\uffc5\011\uffc5\013\uffc5\015\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\001\002\000\030\006" +
    "\uffc6\007\uffc6\011\uffc6\013\uffc6\015\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\054\uffc6\001\002\000\030\006" +
    "\uffc7\007\uffc7\011\uffc7\013\uffc7\015\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\001\002\000\030\006" +
    "\uffc8\007\uffc8\011\uffc8\013\uffc8\015\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\054\uffc8\001\002\000\034\002" +
    "\uffe5\004\uffe5\005\uffe5\010\uffe5\016\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\035\uffe5\041\uffe5\042\uffe5\043\uffe5\046\uffe5\001" +
    "\002\000\056\002\uffe3\004\uffe3\005\uffe3\006\124\010\uffe3" +
    "\016\uffe3\017\126\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\046\uffe3\001\002\000\030\006" +
    "\uffcc\007\uffcc\011\uffcc\013\uffcc\015\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\001\002\000\030\006" +
    "\036\007\035\011\034\013\033\015\031\047\015\050\013" +
    "\051\016\052\012\053\030\054\032\001\002\000\030\006" +
    "\uffcd\007\uffcd\011\uffcd\013\uffcd\015\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\001\002\000\064\002" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\010\uffe1\016\uffe1\017\uffe1" +
    "\020\133\021\132\022\131\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\001\002\000" +
    "\030\006\036\007\035\011\034\013\033\015\031\047\015" +
    "\050\013\051\016\052\012\053\030\054\032\001\002\000" +
    "\030\006\uffc9\007\uffc9\011\uffc9\013\uffc9\015\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\001\002\000" +
    "\030\006\uffca\007\uffca\011\uffca\013\uffca\015\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\001\002\000" +
    "\030\006\uffcb\007\uffcb\011\uffcb\013\uffcb\015\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\001\002\000" +
    "\064\002\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\035\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\001" +
    "\002\000\004\054\136\001\002\000\016\002\uffec\004\uffec" +
    "\005\uffec\010\uffec\043\uffec\046\uffec\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\037\014\040" +
    "\015\016\016\026\017\024\020\023\021\022\022\021\023" +
    "\020\024\017\025\013\032\025\001\001\000\002\001\001" +
    "\000\006\003\010\004\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\127\001\001\000\004\027\124\001\001" +
    "\000\004\031\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\015\102\016\026\017\024\020\023\021\022\022" +
    "\021\023\020\024\017\025\013\026\107\032\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\074\015\073\016\026\017\024\020\023\021\022" +
    "\022\021\023\020\024\017\025\013\032\025\001\001\000" +
    "\006\025\072\032\025\001\001\000\020\020\071\021\022" +
    "\022\021\023\020\024\017\025\013\032\025\001\001\000" +
    "\004\006\044\001\001\000\002\001\001\000\032\005\042" +
    "\014\040\015\016\016\026\017\024\020\023\021\022\022" +
    "\021\023\020\024\017\025\013\032\025\001\001\000\002" +
    "\001\001\000\026\015\070\016\026\017\024\020\023\021" +
    "\022\022\021\023\020\024\017\025\013\032\025\001\001" +
    "\000\004\007\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\051\011\052\015\050\016\026\017\024" +
    "\020\023\021\022\022\021\023\020\024\017\025\013\032" +
    "\025\001\001\000\004\012\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\051\011\054\015\050\016" +
    "\026\017\024\020\023\021\022\022\021\023\020\024\017" +
    "\025\013\032\025\001\001\000\002\001\001\000\004\013" +
    "\065\001\001\000\024\016\061\017\024\020\023\021\022" +
    "\022\021\023\020\024\017\025\013\032\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\017\063\020\023\021\022\022\021\023\020\024\017\025" +
    "\013\032\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\015\102" +
    "\016\026\017\024\020\023\021\022\022\021\023\020\024" +
    "\017\025\013\026\103\032\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\015\102\016" +
    "\026\017\024\020\023\021\022\022\021\023\020\024\017" +
    "\025\013\026\106\032\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\122\023\020\024\017\025\013\032\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\124\001\001\000\002\001\001\000\012" +
    "\023\126\024\017\025\013\032\025\001\001\000\002\001" +
    "\001\000\004\030\127\001\001\000\010\024\133\025\013" +
    "\032\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram pXProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // XBoolConst ::= _SYMB_35 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XBoolConst",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // XBoolConst ::= _SYMB_36 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XBoolConst",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // XRelOp ::= _SYMB_20 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpLesserEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // XRelOp ::= _SYMB_19 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpLesser(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // XRelOp ::= _SYMB_18 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpGreaterEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // XRelOp ::= _SYMB_17 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpGreater(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // XRelOp ::= _SYMB_16 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpNotEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // XRelOp ::= _SYMB_15 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // XArithOpMultiply ::= _SYMB_14 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpModulo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpMultiply",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // XArithOpMultiply ::= _SYMB_13 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpDivide(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpMultiply",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // XArithOpMultiply ::= _SYMB_12 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpMultiply(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpMultiply",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // XArithOpAdd ::= _SYMB_2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpSubstract(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpAdd",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // XArithOpAdd ::= _SYMB_11 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpAdd(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpAdd",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ListXExpression ::= XExpression _SYMB_1 ListXExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpression",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ListXExpression ::= XExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpression",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ListXExpression ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpression",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // XExpression8 ::= _SYMB_3 XExpression _SYMB_4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // XExpression8 ::= _SYMB_3 XStatement _SYMB_4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprStmt(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // XExpression8 ::= _SYMB_9 ListXExpression _SYMB_10 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprAngle(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // XExpression8 ::= _SYMB_7 _SYMB_8 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprBrackets(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // XExpression8 ::= _SYMB_5 _SYMB_6 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprBraces(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // XExpression8 ::= _DOUBLE_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // XExpression8 ::= _INTEGER_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // XExpression8 ::= XBoolConst 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprTrue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // XExpression8 ::= _STRING_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // XExpression8 ::= XIdent _SYMB_3 ListXExpression _SYMB_4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // XExpression8 ::= XIdent 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // XExpression7 ::= XExpression8 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression7",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // XExpression7 ::= _SYMB_2 XExpression8 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithExprNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression7",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // XExpression6 ::= XExpression7 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // XExpression6 ::= XExpression6 XArithOpMultiply XExpression7 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithExprMultiply(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // XExpression5 ::= XExpression6 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // XExpression5 ::= XExpression5 XArithOpAdd XExpression6 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithExprAdd(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // XExpression4 ::= XExpression5 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // XExpression4 ::= XExpression4 XRelOp XExpression5 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolExprRel(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // XExpression3 ::= XExpression4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression3",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // XExpression3 ::= XExpression4 _SYMB_32 _STRING_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolExprRegex(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression3",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // XExpression2 ::= XExpression3 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression2",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // XExpression2 ::= _SYMB_28 XExpression3 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprNot(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression2",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // XExpression1 ::= XExpression2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // XExpression1 ::= XExpression1 _SYMB_21 XExpression2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // XExpression ::= XExpression1 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // XExpression ::= XExpression _SYMB_30 XExpression1 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // XSelectItem ::= XExpression _SYMB_22 XIdent 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.SelectItemAs(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XSelectItem",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // XSelectItem ::= XExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.SelectItem(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XSelectItem",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // XNullsOption ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.NullsOptionEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XNullsOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // XNullsOption ::= _SYMB_29 _SYMB_27 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.NullsOptionLast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XNullsOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // XNullsOption ::= _SYMB_29 _SYMB_26 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.NullsOptionFirst(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XNullsOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // XOrderOption ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderOptionEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderOption",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // XOrderOption ::= _SYMB_25 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderOptionDesc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderOption",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // XOrderOption ::= _SYMB_23 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderOptionAsc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderOption",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListXOrderItem ::= XOrderItem _SYMB_1 ListXOrderItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXOrderItem",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListXOrderItem ::= XOrderItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXOrderItem",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // XOrderItem ::= XExpression XOrderOption XNullsOption 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderItemCond(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderItem",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // XOrderClause ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderClauseEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderClause",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // XOrderClause ::= _SYMB_31 _SYMB_24 ListXOrderItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderClause(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderClause",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // XWhereClause ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.WhereClauseEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XWhereClause",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // XWhereClause ::= _SYMB_34 XExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.WhereClause(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XWhereClause",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListXSelectItem ::= XSelectItem _SYMB_1 ListXSelectItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXSelectItem",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListXSelectItem ::= XSelectItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXSelectItem",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // XStatement ::= _SYMB_33 ListXSelectItem XWhereClause XOrderClause 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause p_4 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.Statement(p_2,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XStatement",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListXStatement ::= XStatement _SYMB_0 ListXStatement 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXStatement",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListXStatement ::= XStatement 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXStatement",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // XProgram ::= ListXStatement 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XProgram",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= XProgram EOF 
            {
              Object RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram start_val = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

