
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 17 23:19:29 CET 2013
//----------------------------------------------------

package stupaq.cloudatlas.parser.QueryLanguage;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 17 23:19:29 CET 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\005\000\002\004\006\000\002\005\003" +
    "\000\002\005\005\000\002\006\004\000\002\006\002\000" +
    "\002\007\005\000\002\007\002\000\002\010\005\000\002" +
    "\011\003\000\002\011\005\000\002\012\003\000\002\012" +
    "\003\000\002\012\002\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\014\003\000\002\014\005\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\017\004\000\002\017\003\000\002\020" +
    "\005\000\002\020\003\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\004\000\002\024\003\000\002" +
    "\025\003\000\002\025\006\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\005" +
    "\000\002\025\005\000\002\026\002\000\002\026\003\000" +
    "\002\026\005\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\003\000" +
    "\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\037\006\001\002\000\004\002\130\001" +
    "\002\000\004\002\000\001\002\000\024\006\032\007\031" +
    "\032\035\041\033\042\023\043\014\044\012\045\027\046" +
    "\030\001\002\000\006\002\uffff\004\010\001\002\000\004" +
    "\037\006\001\002\000\004\002\ufffe\001\002\000\062\002" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\040\uffd7\001\002\000\062\002" +
    "\uffdc\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\040\uffdc\001\002\000\062\002" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\040\uffd9\001\002\000\022\002" +
    "\uffed\004\uffed\005\uffed\010\uffed\024\126\034\045\035\uffed" +
    "\040\uffed\001\002\000\062\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\027\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\040\uffde\001\002\000\062\002\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\010\uffe0\011\uffe0\012\124\013\123\014\122\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\027\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\040\uffe0\001\002\000\054\002\uffe2\004\uffe2\005\uffe2\006" +
    "\115\010\uffe2\011\117\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\040\uffe2\001\002\000\050" +
    "\002\uffe4\004\uffe4\005\uffe4\010\uffe4\015\105\016\103\017" +
    "\112\020\111\021\110\022\106\023\uffe4\024\uffe4\025\uffe4" +
    "\027\uffe4\033\uffe4\034\uffe4\035\uffe4\036\107\040\uffe4\001" +
    "\002\000\032\002\uffe6\004\uffe6\005\uffe6\010\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\027\uffe6\033\uffe6\034\uffe6\035\uffe6\040" +
    "\uffe6\001\002\000\062\002\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\027\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040" +
    "\uffc5\001\002\000\032\002\uffe8\004\uffe8\005\uffe8\010\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\027\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\040\uffe8\001\002\000\062\002\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\027\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\040\uffd8\001\002\000\032\002\uffea\004\uffea\005\uffea" +
    "\010\uffea\023\047\024\uffea\025\uffea\027\uffea\033\uffea\034" +
    "\uffea\035\uffea\040\uffea\001\002\000\062\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\027\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\040\uffd6\001\002\000\064\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\075\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\040\uffdb\001\002\000\026\006\032" +
    "\007\031\032\035\037\006\041\033\042\023\043\014\044" +
    "\012\045\027\046\030\001\002\000\020\007\031\041\033" +
    "\042\023\043\014\044\012\045\027\046\030\001\002\000" +
    "\062\002\uffc4\004\uffc4\005\uffc4\006\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4\001\002\000" +
    "\014\002\ufff9\004\ufff9\010\ufff9\035\ufff9\040\043\001\002" +
    "\000\022\006\032\007\031\041\033\042\023\043\014\044" +
    "\012\045\027\046\030\001\002\000\016\002\ufffc\004\ufffc" +
    "\005\037\010\ufffc\035\ufffc\040\ufffc\001\002\000\024\006" +
    "\032\007\031\032\035\041\033\042\023\043\014\044\012" +
    "\045\027\046\030\001\002\000\014\002\ufffb\004\ufffb\010" +
    "\ufffb\035\ufffb\040\ufffb\001\002\000\032\002\uffe7\004\uffe7" +
    "\005\uffe7\010\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\040\uffe7\001\002\000\012\002\ufff7" +
    "\004\ufff7\010\ufff7\035\052\001\002\000\024\006\032\007" +
    "\031\032\035\041\033\042\023\043\014\044\012\045\027" +
    "\046\030\001\002\000\014\002\ufffa\004\ufffa\010\ufffa\034" +
    "\045\035\ufffa\001\002\000\024\006\032\007\031\032\035" +
    "\041\033\042\023\043\014\044\012\045\027\046\030\001" +
    "\002\000\032\002\uffeb\004\uffeb\005\uffeb\010\uffeb\023\047" +
    "\024\uffeb\025\uffeb\027\uffeb\033\uffeb\034\uffeb\035\uffeb\040" +
    "\uffeb\001\002\000\024\006\032\007\031\032\035\041\033" +
    "\042\023\043\014\044\012\045\027\046\030\001\002\000" +
    "\032\002\uffe9\004\uffe9\005\uffe9\010\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\027\uffe9\033\uffe9\034\uffe9\035\uffe9\040\uffe9\001" +
    "\002\000\010\002\ufffd\004\ufffd\010\ufffd\001\002\000\004" +
    "\026\053\001\002\000\024\006\032\007\031\032\035\041" +
    "\033\042\023\043\014\044\012\045\027\046\030\001\002" +
    "\000\022\002\ufff1\004\ufff1\005\ufff1\010\ufff1\025\063\027" +
    "\062\033\ufff1\034\045\001\002\000\012\002\ufff5\004\ufff5" +
    "\005\057\010\ufff5\001\002\000\010\002\ufff8\004\ufff8\010" +
    "\ufff8\001\002\000\024\006\032\007\031\032\035\041\033" +
    "\042\023\043\014\044\012\045\027\046\030\001\002\000" +
    "\010\002\ufff4\004\ufff4\010\ufff4\001\002\000\014\002\uffee" +
    "\004\uffee\005\uffee\010\uffee\033\065\001\002\000\014\002" +
    "\ufff2\004\ufff2\005\ufff2\010\ufff2\033\ufff2\001\002\000\014" +
    "\002\ufff3\004\ufff3\005\ufff3\010\ufff3\033\ufff3\001\002\000" +
    "\012\002\ufff6\004\ufff6\005\ufff6\010\ufff6\001\002\000\006" +
    "\030\067\031\066\001\002\000\012\002\uffef\004\uffef\005" +
    "\uffef\010\uffef\001\002\000\012\002\ufff0\004\ufff0\005\ufff0" +
    "\010\ufff0\001\002\000\062\002\uffdd\004\uffdd\005\uffdd\006" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\027\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\040\uffdd\001\002\000\006\010\074\034\045\001\002\000" +
    "\004\010\073\001\002\000\062\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\027\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\040\uffd5\001\002\000\062\002\uffd4\004\uffd4\005\uffd4" +
    "\006\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\040\uffd4\001\002\000\026\006\032\007\031\010\uffd3" +
    "\032\035\041\033\042\023\043\014\044\012\045\027\046" +
    "\030\001\002\000\010\005\101\010\uffd2\034\045\001\002" +
    "\000\004\010\100\001\002\000\062\002\uffda\004\uffda\005" +
    "\uffda\006\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\027\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\040\uffda\001\002\000\026\006\032\007\031\010" +
    "\uffd3\032\035\041\033\042\023\043\014\044\012\045\027" +
    "\046\030\001\002\000\004\010\uffd1\001\002\000\022\006" +
    "\uffca\007\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\001\002\000\022\006\032\007\031\041\033\042" +
    "\023\043\014\044\012\045\027\046\030\001\002\000\022" +
    "\006\uffcb\007\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\001\002\000\022\006\uffc6\007\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\001\002\000" +
    "\004\043\113\001\002\000\022\006\uffc7\007\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000" +
    "\022\006\uffc8\007\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\001\002\000\022\006\uffc9\007\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\001\002" +
    "\000\032\002\uffe5\004\uffe5\005\uffe5\010\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\027\uffe5\033\uffe5\034\uffe5\035\uffe5\040\uffe5" +
    "\001\002\000\054\002\uffe3\004\uffe3\005\uffe3\006\115\010" +
    "\uffe3\011\117\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\040\uffe3\001\002\000\022\006\uffcf" +
    "\007\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\001\002\000\022\006\032\007\031\041\033\042\023" +
    "\043\014\044\012\045\027\046\030\001\002\000\022\006" +
    "\uffd0\007\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\001\002\000\062\002\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\010\uffe1\011\uffe1\012\124\013\123\014\122\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\027\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\040\uffe1\001\002\000\022\006\032\007\031\041\033\042" +
    "\023\043\014\044\012\045\027\046\030\001\002\000\022" +
    "\006\uffcc\007\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\001\002\000\022\006\uffcd\007\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\001\002\000" +
    "\022\006\uffce\007\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\001\002\000\062\002\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\027\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\040\uffdf\001\002\000\004\046\127\001\002\000" +
    "\016\002\uffec\004\uffec\005\uffec\010\uffec\035\uffec\040\uffec" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\033\014\035" +
    "\015\014\016\025\017\023\020\021\021\020\022\017\023" +
    "\016\024\015\025\012\032\024\001\001\000\002\001\001" +
    "\000\006\003\010\004\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\120\001\001\000" +
    "\004\027\115\001\001\000\004\031\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\071\015\070\016\025\017\023\020\021\021" +
    "\020\022\017\023\016\024\015\025\012\032\024\001\001" +
    "\000\006\025\067\032\024\001\001\000\002\001\001\000" +
    "\004\006\041\001\001\000\020\020\040\021\020\022\017" +
    "\023\016\024\015\025\012\032\024\001\001\000\002\001" +
    "\001\000\032\005\037\014\035\015\014\016\025\017\023" +
    "\020\021\021\020\022\017\023\016\024\015\025\012\032" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\050\001\001\000\026\015\043\016\025\017\023\020" +
    "\021\021\020\022\017\023\016\024\015\025\012\032\024" +
    "\001\001\000\002\001\001\000\024\016\045\017\023\020" +
    "\021\021\020\022\017\023\016\024\015\025\012\032\024" +
    "\001\001\000\002\001\001\000\022\017\047\020\021\021" +
    "\020\022\017\023\016\024\015\025\012\032\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\010\054\011\055\015\053\016\025\017\023\020\021" +
    "\021\020\022\017\023\016\024\015\025\012\032\024\001" +
    "\001\000\004\012\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\010\054\011\057\015\053\016\025\017" +
    "\023\020\021\021\020\022\017\023\016\024\015\025\012" +
    "\032\024\001\001\000\002\001\001\000\004\013\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\015\075\016\025\017" +
    "\023\020\021\021\020\022\017\023\016\024\015\025\012" +
    "\026\076\032\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\015\075\016\025\017\023" +
    "\020\021\021\020\022\017\023\016\024\015\025\012\026" +
    "\101\032\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\113\023\016\024\015\025\012\032\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\115\001\001\000\002\001\001" +
    "\000\012\023\117\024\015\025\012\032\024\001\001\000" +
    "\002\001\001\000\004\030\120\001\001\000\010\024\124" +
    "\025\012\032\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram pXProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // XBoolConst ::= _SYMB_29 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolConstFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XBoolConst",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // XBoolConst ::= _SYMB_30 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolConstTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XBoolConst",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // XRelOp ::= _SYMB_14 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpLesserEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // XRelOp ::= _SYMB_13 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpLesser(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // XRelOp ::= _SYMB_12 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpGreaterEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // XRelOp ::= _SYMB_11 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpGreater(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // XRelOp ::= _SYMB_10 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpNotEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // XRelOp ::= _SYMB_9 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.RelOpEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XRelOp",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // XArithOpMultiply ::= _SYMB_8 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpModulo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpMultiply",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // XArithOpMultiply ::= _SYMB_7 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpDivide(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpMultiply",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // XArithOpMultiply ::= _SYMB_6 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpMultiply(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpMultiply",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // XArithOpAdd ::= _SYMB_2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpSubstract(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpAdd",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // XArithOpAdd ::= _SYMB_5 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithOpAdd(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XArithOpAdd",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListXExpression ::= XExpression _SYMB_1 ListXExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpression",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListXExpression ::= XExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpression",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListXExpression ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXExpression",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // XExpression8 ::= _SYMB_3 XExpression _SYMB_4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // XExpression8 ::= _SYMB_3 XStatement _SYMB_4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprStmt(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // XExpression8 ::= _DOUBLE_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprDouble(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // XExpression8 ::= _INTEGER_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // XExpression8 ::= XBoolConst 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XBoolConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprTrue(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // XExpression8 ::= _STRING_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // XExpression8 ::= XIdent _SYMB_3 ListXExpression _SYMB_4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprCall(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // XExpression8 ::= XIdent 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BasicExprVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression8",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // XExpression7 ::= XExpression8 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression7",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // XExpression7 ::= _SYMB_2 XExpression8 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithExprNeg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression7",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // XExpression6 ::= XExpression7 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // XExpression6 ::= XExpression6 XArithOpMultiply XExpression7 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpMultiply)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithExprMultiply(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // XExpression5 ::= XExpression6 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // XExpression5 ::= XExpression5 XArithOpAdd XExpression6 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XArithOpAdd)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ArithExprAdd(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression5",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // XExpression4 ::= XExpression5 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // XExpression4 ::= XExpression4 XRelOp XExpression5 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XRelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolExprRel(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression4",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // XExpression3 ::= XExpression4 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression3",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // XExpression3 ::= XExpression4 _SYMB_26 _STRING_ 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.BoolExprRegex(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression3",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // XExpression2 ::= XExpression3 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression2",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // XExpression2 ::= _SYMB_22 XExpression3 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprNot(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression2",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // XExpression1 ::= XExpression2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // XExpression1 ::= XExpression1 _SYMB_15 XExpression2 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression1",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // XExpression ::= XExpression1 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // XExpression ::= XExpression _SYMB_24 XExpression1 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.CondExprOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XExpression",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // XSelectItem ::= XExpression _SYMB_16 XIdent 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.SelectItemAs(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XSelectItem",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // XSelectItem ::= XExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.SelectItem(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XSelectItem",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // XNullsOption ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.NullsOptionEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XNullsOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // XNullsOption ::= _SYMB_23 _SYMB_21 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.NullsOptionLast(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XNullsOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // XNullsOption ::= _SYMB_23 _SYMB_20 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.NullsOptionFirst(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XNullsOption",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // XOrderOption ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderOptionEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderOption",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // XOrderOption ::= _SYMB_19 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderOptionDesc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderOption",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // XOrderOption ::= _SYMB_17 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderOptionAsc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderOption",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListXOrderItem ::= XOrderItem _SYMB_1 ListXOrderItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXOrderItem",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListXOrderItem ::= XOrderItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXOrderItem",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // XOrderItem ::= XExpression XOrderOption XNullsOption 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderOption)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XNullsOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderItemCond(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderItem",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // XOrderClause ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderClauseEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderClause",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // XOrderClause ::= _SYMB_25 _SYMB_18 ListXOrderItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXOrderItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.OrderClause(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XOrderClause",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // XWhereClause ::= 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause RESULT =null;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.WhereClauseEmpty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XWhereClause",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // XWhereClause ::= _SYMB_28 XExpression 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.WhereClause(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XWhereClause",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListXSelectItem ::= XSelectItem _SYMB_1 ListXSelectItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXSelectItem",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListXSelectItem ::= XSelectItem 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXSelectItem",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // XStatement ::= _SYMB_27 ListXSelectItem XWhereClause XOrderClause 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem p_2 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXSelectItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XWhereClause)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause p_4 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XOrderClause)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.Statement(p_2,p_3,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XStatement",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListXStatement ::= XStatement _SYMB_0 ListXStatement 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement p_3 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXStatement",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListXStatement ::= XStatement 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListXStatement",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // XProgram ::= ListXStatement 
            {
              stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement p_1 = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.ListXStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new stupaq.cloudatlas.parser.QueryLanguage.Absyn.Program(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XProgram",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= XProgram EOF 
            {
              Object RESULT =null;
		stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram start_val = (stupaq.cloudatlas.parser.QueryLanguage.Absyn.XProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

